<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on xiongfeng chen | 笔记</title>
    <link>/categories/golang/</link>
    <description>Recent content in golang on xiongfeng chen | 笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>godoc 查看函数文档和源代码</title>
      <link>/post/2021-03-12-use-godoc/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021-03-12-use-godoc/</guid>
      <description>这个非常有意思，感觉和 R 的文档查看和使用完全是不一样的风格。 $ go doc runtime NumCPU $ go doc -src runtime NumCPU 查看效果： ▶ go doc runtime NumCPU package runtime // import &amp;#34;runtime&amp;#34; func NumCPU() int NumCPU returns the number of logical CPUs usable by the current</description>
    </item>
    
    <item>
      <title>《Mastering Go》第一章笔记</title>
      <link>/art/mastering-go-book-chapter-01/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/art/mastering-go-book-chapter-01/</guid>
      <description>godoc 使用 go doc fmt.Printf go doc fmt # Open a Go doc server godoc -http=:8001 运行和编译 go 代码 package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;This is a sample Go program!&amp;#34;) } 使用 go run filename 运行代码文件；使用 go buils filename 编译 go 代码形成可执行文件。 下</description>
    </item>
    
  </channel>
</rss>
